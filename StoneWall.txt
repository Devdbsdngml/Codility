// 첫번 째 접근방법
// 스택이냐 큐냐 헷갈리고 대충 로직을 짯는데 한 시간동안 고민하다 결국 힌트를 얻었다
/*

input이랑 output만 봐서 해석했을 때,
배열 값(높이)만큼 벽을 세우는데 총 몇 개의 벽이 생기는지 return

배열 값들이 차이가 있을 때 벽이 생긴다?

*/

import java.util.*;

class Solution {
    public int solution(int[] H) {
        // write your code in Java SE 8
        Queue<Integer> wall = new LinkedList<>();
        int block = 0;

        for(int i : H){
            wall.offer(i);
        }

        int cur = wall.poll(); // 8
        System.out.println("cur : "+cur);
        while(!wall.isEmpty()){
            int next = wall.peek(); // 8
            if(cur > next){
                cur = next;
                block++;
                wall.poll();
            } else if(cur == next){
                block++;
                wall.poll();
            } else{

            }
        }

        return block;
    }
}

// 힌트 본 풀이(100%)

*Hint
Stack을 이용하여 index의 높이마다 이전 index의 높이와 비교하여 H[i]의 값이 Stack의 값보다 크면 push하고
작을 경우 pop하면 된다

import java.util.*;

class Solution {
    public int solution(int[] H) {
        // write your code in Java SE 8
        int block = 0;
        Stack<Integer> wall = new Stack<>();

        for(int i : H){
            // stack에 존재하고 stack의 값이 i 값보다 클동안
            while(!wall.isEmpty() && i < wall.peek()){
                wall.pop();
            }
            // stack이 비어있거나 다음 값이 현재 값보다 크면
            if(wall.isEmpty() || i > wall.peek()){
                block++;
                wall.push(i);
            }
        }

        return block;
    }
}