// 첫번째 풀이(66%) TC가 몇개 틀림
/*

배열의 크기는 10만 -> O(n^2) X
배열의 값 범위는 -int ~ int

배열에서 가장 많이 나온 값(dominator)들의 index를 반환
만약, dominator가 없으면 -1
없을 경우 -> 1. 모두 한 개씩 존재할 때
            2. dominator가 여러 개 존재할 때

HashMap 에 값과 횟수를 저장하고
제일 많이 나온 값을 배열에서 한번 더 찾아 index를 print?

*/

import java.util.*;

class Solution {
    public int solution(int[] A) {
        // write your code in Java SE 8
        HashMap<Integer, Integer> dominator = new HashMap<>();

        for(int i : A){
            // if(!dominator.containsKey(i)){
            //     dominator.put(i, 1);
            // } else{
            //     dominator.put(i, dominator.get(i)+1);
            // }
            dominator.put(i, dominator.getOrDefault(i, 0)+1);
        }

        // dominator 출력
        // for(Map.Entry<Integer, Integer> entry : dominator.entrySet()){
        //     System.out.println("Key : "+entry.getKey()+" Value : "+entry.getValue());
        // }

        int val = 0; // 값
        int cnt = 0; // 나타난 횟수

        for(Map.Entry<Integer, Integer> entry : dominator.entrySet()){
            if(entry.getValue() > cnt){
                val = entry.getKey();
                cnt = entry.getValue();
            }
        }

        // System.out.println("val : "+val+" cnt : "+cnt);

        if(cnt < A.length / 2){
            return -1;
        }

        int idx; // 인덱스

        for(idx=0; idx<A.length; idx++){
            if(val == A[idx]){
                break;
            }
        }

        return idx;
    }
}

// 두번째 풀이(100%) 
// cnt(많이 나타난 횟수)가 (A 길이 / 2) 보다 작거나 같으면 dominator라고 할 수가 없다

import java.util.*;

class Solution {
    public int solution(int[] A) {
        // write your code in Java SE 8
        HashMap<Integer, Integer> dominator = new HashMap<>();

        for(int i : A){
            dominator.put(i, dominator.getOrDefault(i, 0)+1);
        }

        int val = 0; // 값
        int cnt = 0; // 나타난 횟수

        for(Map.Entry<Integer, Integer> entry : dominator.entrySet()){
            if(entry.getValue() > cnt){
                val = entry.getKey();
                cnt = entry.getValue();
            }
        }

        if(cnt <= A.length / 2){
            return -1;
        }

        int idx; // 인덱스

        for(idx=0; idx<A.length; idx++){
            if(val == A[idx]){
                break;
            }
        }

        return idx;
    }
}