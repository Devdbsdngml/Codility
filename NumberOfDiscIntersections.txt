// 첫번째 풀이(56%) 시간 복잡도 O(n^2)
// 테케는 다 맞지만 퍼포먼스는 모두 타임아웃 에러..

import java.util.*;

        /*
        배열 A : 인덱스가 원의 중점이고 값이 반지름

        J번째 disc와 K번째 disc가 같지 않을 때, 적어도 하나의 common point가 있으면 교차한다
        이때 교차된 disc 쌍 개수를 return

        (1,0) (1,2) (1,3) (1,4) (1,5) -> 값 : 5 보다 작은 값들의 인덱스는 다 교차된다
        (4,0) (4,2) (4,3) (4,5) -> 값 : 4 보다 작은 값들의 인덱스는 다 교차됨 중복 X
        (2,0) (2,3) -> 값 2 : 보다 작은 값들의 인덱스 다 교차됨

        위 설명대로라면 값 1 보다 작은 0은 값 1의 인덱스보다 크다면 교차가 안 됨..
        1 이하는 생각할 필요 X

        if A[0] = 1 , A[2] = 1 ? 둘은 교차가 됨..

        어떻게 풀어야될까?

        11개

        내림차순으로 정렬 -> 첫번째 원소값보다 작은 원소값의 인덱스 HashSet에 add -> 반복 : 틀린 생각인듯

        내림차순 정렬
        A[1] = 5 
        A[4] = 4
        A[2] = 2
        A[0] = 1
        A[3] = 1
        A[5] = 0

        오름차순 정렬
        A[5] = 0
        A[0] = 1 -> 인덱스와 값이 크면 교차? (0,2) (0,4) (0,1)
        A[3] = 1 -> (3,4) (3,1)
        A[2] = 2 -> (2,4) (2)
        A[4] = 4
        A[1] = 5

        : 틀린 생각인듯

        *원의 최저 좌표와 최고 좌표를 비교하면 될 듯

        */

class Solution {
    class Circle implements Comparable<Circle>{
        long left;
        long right;

        Circle(long left, long right){
            this.left = left;
            this.right = right;
        }
        // left 좌표 기준으로 오름차순 정렬
        @Override
        public int compareTo(Circle circle){
            if(this.left > circle.left){
                return 1;
            } else if(this.left == circle.left){
                return Long.compare(this.right, circle.right);
            } else{
                return -1;
            }
        }
    }
    public int solution(int[] A) {
       ArrayList<Circle> list = new ArrayList<>();

       for(int i=0; i<A.length; i++){
           list.add(new Circle((long)i-A[i], (long)i+A[i]));
       }

       Collections.sort(list);
       int cnt = 0;

       for(int i=0; i<A.length-1; i++){
           for(int j=i+1; j<A.length; j++){
               if(cnt > 10000000){
                   return -1;
               } 
               // 기준 원의 right보다 비교 원의 left가 크면 비교 X
               if(list.get(j).left > list.get(i).right){
                   break;
               }
               // 비교 원의 left가 기준 원의 left보다 크거나 같고 비교 원의 left가 기준 원의 right보다 작거나 같을 때 겹침
               if(list.get(j).left >= list.get(i).left && list.get(j).left <= list.get(i).right){
                   cnt++;
               }
           }
       }

       return cnt;

    }
}

// 도저히 모르겠어서 구글링해서 찾은 풀이
// right 보다 작은 left 들은 반드시 가장 작은 right보다 큰 반지름을 갖음으로 접점 발생
// 다음 right 좌표에서 겹치지 않게 j 만큼 빼줌

import java.util.*;

class Solution {
    public int solution(int[] A) {
        int len = A.length;

        int cnt = 0;
        int j =0;

        long[] left = new long[len];
        long[] right = new long[len];

        for(int i=0; i<len; i++){
            left[i] = i - (long)A[i];
            right[i] = i + (long)A[i];
        }

        // left 좌표와 right 좌표 오름차순으로 정렬
        Arrays.sort(left);
        Arrays.sort(right);

        for(int i=0; i<len; i++){
            while(j < len && right[i] >= left[j]){
                cnt += j;
                cnt -= i;
                j++;
            }
        }

        return cnt > 10000000 ? -1 : cnt;
    }
}