// 첫번째 풀이(37%) ;;
import java.util.*;

class Solution {
    public int solution(String S) {
        /*
        
        {[()()]} return 1
        ([)()] return 0

        완벽하게 중첩이 되어있으면 1 otherwise 0
        
        */

        // S의 길이가 홀수 -> 어쨋든 짝이 안 맞음
        if(S.length() % 2 == 1){
            return 0;
        }

        Stack<Character> bracket = new Stack<>();

        for(char c : S.toCharArray()){
            if(c == '(' || c == '{' || c == '['){
                bracket.push(c);
            } else if(c == ')'){
                if(!bracket.isEmpty() && bracket.peek() != '('){
                    return 0;
                } else{
                    bracket.pop();
                }
            } else if(c == '}'){
                if(!bracket.isEmpty() && bracket.peek() != '{'){
                    return 0;
                } else{
                    bracket.pop();
                }
            } else if(c == ']'){
                if(!bracket.isEmpty() && bracket.peek() != '['){
                    return 0;
                } else{
                    bracket.pop();
                }
            }
        }

        return bracket.isEmpty() ? 1 : 0;
    }
}

// 두번째 풀이(100%)
// 닫는 괄호일 때 조건문을 잘못 생각함 '스택에 존재 &&'이 아니라 '스택이 비어있거나 ||' 가 맞음
import java.util.*;

class Solution {
    public int solution(String S) {
        /*
        
        {[()()]} return 1
        ([)()] return 0

        완벽하게 중첩이 되어있으면 1 otherwise 0
        
        */

        // S의 길이가 홀수 -> 어쨋든 짝이 안 맞음
        if(S.length() % 2 == 1){
            return 0;
        }

        Stack<Character> bracket = new Stack<>();

        for(char c : S.toCharArray()){
            if(c == '(' || c == '{' || c == '['){
                bracket.push(c);
            } else if(c == ')'){
                if(bracket.isEmpty() || bracket.peek() != '('){
                    return 0;
                } else{
                    bracket.pop();
                }
            } else if(c == '}'){
                if(bracket.isEmpty() || bracket.peek() != '{'){
                    return 0;
                } else{
                    bracket.pop();
                }
            } else if(c == ']'){
                if(bracket.isEmpty() || bracket.peek() != '['){
                    return 0;
                } else{
                    bracket.pop();
                }
            }
        }

        return bracket.isEmpty() ? 1 : 0;
    }
}